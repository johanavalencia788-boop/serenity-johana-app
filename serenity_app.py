import streamlit as st
import random
from unidecode import unidecode
import base64
import io
from PIL import Image, ImageDraw, ImageFont
import numpy as np

# GENERADOR DE AVATAR INTEGRADO
# Avatar por defecto (ser√° reemplazado por el generado)
AVATAR_SERENITY_VIDEO = "https://streamable.com/ez13ge"
AVATAR_SERENITY_IMAGEN = "https://cdn-icons-png.flaticon.com/512/4140/4140051.png"

# URLs de servicios para crear avatares
SERVICIOS_AVATAR = {
    "d-id": "https://www.d-id.com/",
    "synthesia": "https://www.synthesia.io/",
    "avatar_maker": "https://avatarmaker.com/",
    "bitmoji": "https://www.bitmoji.com/",
    "memoji": "https://support.apple.com/es-es/102854",
    "ready_player_me": "https://readyplayer.me/",
    "loom": "https://www.loom.com/",
    "vidyard": "https://www.vidyard.com/"
}

# VIDEOS DE EJERCICIO EN ESPA√ëOL - URLs FUNCIONALES
VIDEO_RESPIRACION = "https://www.youtube.com/embed/cEeWLDMDqpk"  # Meditaci√≥n 5 min
VIDEO_MEDITACION = "https://www.youtube.com/embed/jPgBOk8Za9U"   # Sonidos relajantes

# Videos de relajaci√≥n en ESPA√ëOL - URLs FUNCIONALES
VIDEOS_RELAJACION = [
    "https://www.youtube.com/embed/UfcAVejvCgE",  # M√∫sica relajante
    "https://www.youtube.com/embed/jPgBOk8Za9U",  # Sonidos naturaleza
    "https://www.youtube.com/embed/cEeWLDMDqpk"   # Meditaci√≥n guiada
]

# Videos de ejercicios en espa√±ol - URLs FUNCIONALES
videos_ejercicios_espanol = [
    "https://www.youtube.com/embed/UfcAVejvCgE",  # M√∫sica relajante
    "https://www.youtube.com/embed/jPgBOk8Za9U",  # Sonidos para yoga
    "https://www.youtube.com/embed/cEeWLDMDqpk"   # Meditaci√≥n para ejercicios
]

# SONIDOS DE RELAJACI√ìN EN ESPA√ëOL - URLs FUNCIONALES
SONIDOS_RELAJACION = [
    "https://www.youtube.com/embed/UfcAVejvCgE",  # M√∫sica relajante
    "https://www.youtube.com/embed/jPgBOk8Za9U",  # Sonidos naturaleza
    "https://www.youtube.com/embed/cEeWLDMDqpk"   # Meditaci√≥n
]

# Frases que indican alegr√≠a
frases_alegria = [
    "estoy muy contento", "me siento genial", "qu√© d√≠a tan bueno", "estoy feliz",
    "tengo mucha energ√≠a", "qu√© alegr√≠a", "estoy emocionado", "estoy emocionada", 
    "super contento", "super feliz", "muy bien", "excelente", "fant√°stico"
]

# Mensajes motivacionales en ESPA√ëOL ESTRICTO
mensajes_motivacionales = [
    "Eres importante y tu vida tiene mucho valor.",
    "No est√°s solo, siempre hay alguien dispuesto a escucharte.",
    "Cada d√≠a es una nueva oportunidad para sentirte mejor.",
    "Tus emociones son v√°lidas, perm√≠tete sentirlas sin juicio.",
    "Pedir ayuda cuando la necesites es un acto de mucha valent√≠a.",
    "Recuerda siempre: despu√©s de la tormenta, sale el sol.",
    "Tu bienestar mental es una prioridad, nunca un lujo.",
    "Cada peque√±o paso hacia adelante cuenta much√≠simo.",
    "Eres m√°s fuerte y resiliente de lo que puedes imaginar.",
    "Hoy es un buen d√≠a para cuidar de ti mismo."
]

# PEL√çCULAS EN ESPA√ëOL RECOMENDADAS
peliculas_espanol = [
    {
        "titulo": "El Secreto de Sus Ojos",
        "genero": "Drama/Suspenso",
        "descripcion": "Una historia sobre la b√∫squeda de justicia y el poder del amor verdadero.",
        "por_que": "Te ayudar√° a reflexionar sobre la vida y encontrar esperanza en momentos dif√≠ciles."
    },
    {
        "titulo": "Volver",
        "genero": "Drama/Comedia",
        "descripcion": "Una pel√≠cula de Almod√≥var sobre familia, perd√≥n y segundas oportunidades.",
        "por_que": "Trata temas de sanaci√≥n emocional y la importancia de los v√≠nculos familiares."
    },
    {
        "titulo": "El Libro de la Vida",
        "genero": "Animaci√≥n/Familia",
        "descripcion": "Una hermosa historia sobre el amor, la familia y encontrar tu verdadero prop√≥sito.",
        "por_que": "Es muy inspiradora y te llenar√° de energ√≠a positiva y esperanza."
    },
    {
        "titulo": "No Se Aceptan Devoluciones",
        "genero": "Drama/Comedia",
        "descripcion": "Una emotiva historia sobre paternidad, amor y sacrificio personal.",
        "por_que": "Te har√° valorar profundamente las relaciones importantes en tu vida."
    },
    {
        "titulo": "Coco",
        "genero": "Animaci√≥n/Familia",
        "descripcion": "Una pel√≠cula sobre familia, memoria y la importancia de seguir tus sue√±os.",
        "por_que": "Es muy emotiva y te ayudar√° a conectar con tus emociones m√°s profundas."
    },
    {
        "titulo": "Roma",
        "genero": "Drama",
        "descripcion": "Una pel√≠cula √≠ntima sobre familia, memoria y diferencias sociales.",
        "por_que": "Es profundamente emotiva y te ayudar√° a reflexionar sobre la vida."
    },
    {
        "titulo": "El Laberinto del Fauno",
        "genero": "Fantas√≠a/Drama",
        "descripcion": "Una historia sobre la imaginaci√≥n como escape y la esperanza eterna.",
        "por_que": "Te inspirar√° a encontrar belleza incluso en los tiempos m√°s dif√≠ciles."
    }
]

def mostrar_video_integrado(url, titulo="Video", ancho=500, alto=280):
    """Funci√≥n para mostrar videos integrados con m√∫ltiples opciones"""
    try:
        # Opci√≥n 1: Iframe de YouTube mejorado
        st.markdown(
            f"""
            <div style="display: flex; justify-content: center; margin: 15px 0; padding: 10px;">
                <iframe width="{ancho}" height="{alto}" 
                src="{url}?autoplay=0&mute=0&rel=0&modestbranding=1" 
                title="{titulo}"
                frameborder="0" 
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                allowfullscreen
                style="border-radius: 12px; box-shadow: 0 6px 12px rgba(0,0,0,0.15); border: 2px solid #4ECDC4;"></iframe>
            </div>
            """,
            unsafe_allow_html=True
        )
    except Exception as e:
        # Opci√≥n alternativa si falla el iframe
        st.markdown(f"""
        <div style="text-align: center; padding: 20px; background: #f0f8ff; border-radius: 10px; margin: 15px 0;">
            <h4>üé¨ {titulo}</h4>
            <p>üìπ <a href="{url.replace('/embed/', '/watch?v=')}" target="_blank" style="color: #1f77b4;">Ver video en YouTube</a></p>
            <p style="font-size: 0.9em; color: #666;">Si el video no se carga, haz clic en el enlace para verlo directamente</p>
        </div>
        """, unsafe_allow_html=True)

def generar_avatar_ia(nombre, estilo="profesional", color_favorito="#4ECDC4"):
    """Genera avatar con IA usando PIL y algoritmos simples"""
    
    # Crear imagen base
    width, height = 300, 300
    
    # Colores basados en el estilo
    if estilo == "profesional":
        bg_color = (245, 245, 250)
        primary_color = tuple(int(color_favorito.lstrip('#')[i:i+2], 16) for i in (0, 2, 4))
    elif estilo == "amigable":
        bg_color = (255, 248, 225)
        primary_color = (255, 182, 193)
    else:  # relajante
        bg_color = (240, 255, 240)
        primary_color = (152, 251, 152)
    
    # Crear imagen
    img = Image.new('RGB', (width, height), bg_color)
    draw = ImageDraw.Draw(img)
    
    # Dibujar cara circular
    face_size = 160
    face_x = (width - face_size) // 2
    face_y = (height - face_size) // 2
    
    # Cara base
    draw.ellipse([face_x, face_y, face_x + face_size, face_y + face_size], 
                 fill=primary_color, outline=(100, 100, 100), width=3)
    
    # Ojos
    eye_y = face_y + 50
    draw.ellipse([face_x + 40, eye_y, face_x + 60, eye_y + 20], fill=(0, 0, 0))
    draw.ellipse([face_x + 100, eye_y, face_x + 120, eye_y + 20], fill=(0, 0, 0))
    
    # Pupilas brillantes
    draw.ellipse([face_x + 45, eye_y + 5, face_x + 55, eye_y + 15], fill=(255, 255, 255))
    draw.ellipse([face_x + 105, eye_y + 5, face_x + 115, eye_y + 15], fill=(255, 255, 255))
    
    # Sonrisa
    smile_y = face_y + 100
    draw.arc([face_x + 50, smile_y, face_x + 110, smile_y + 30], 0, 180, fill=(0, 0, 0), width=4)
    
    # Texto del nombre
    try:
        font = ImageFont.truetype("arial.ttf", 24)
    except:
        font = ImageFont.load_default()
    
    text_bbox = draw.textbbox((0, 0), nombre, font=font)
    text_width = text_bbox[2] - text_bbox[0]
    text_x = (width - text_width) // 2
    draw.text((text_x, height - 50), nombre, fill=(50, 50, 50), font=font)
    
    # Agregar elementos decorativos
    # Estrellitas alrededor
    for i in range(8):
        x = face_x + random.randint(-30, face_size + 30)
        y = face_y + random.randint(-30, face_size + 30)
        if not (face_x < x < face_x + face_size and face_y < y < face_y + face_size):
            draw.text((x, y), "‚ú®", fill=primary_color, font=font)
    
    return img

def crear_avatar_animado_ia(nombre, personalidad="amigable"):
    """Crea m√∫ltiples frames para avatar animado"""
    frames = []
    
    for i in range(4):  # 4 frames para animaci√≥n simple
        # Variar ligeramente cada frame
        if personalidad == "energetico":
            color = f"#{random.choice(['FF6B9D', '4ECDC4', 'FFE66D', '95E1D3'])}"
        elif personalidad == "relajado":
            color = f"#{random.choice(['B8E6B8', 'E8F4FD', 'FFE5B4', 'FFCCCB'])}"
        else:  # amigable
            color = f"#{random.choice(['87CEEB', 'DDA0DD', 'F0E68C', 'FFB6C1'])}"
        
        frame = generar_avatar_ia(nombre, "amigable", color)
        frames.append(frame)
    
    return frames

def crear_avatar_personalizado():
    """Generador de avatar integrado con IA"""
    st.markdown("### üé® Crear Tu Avatar con IA Integrada")
    
    st.success("ü§ñ **¬°Nueva funci√≥n!** Ahora puedes generar avatares directamente con IA")
    
    # Pesta√±as para diferentes m√©todos
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üß† IA Integrada", "ü§ñ AI Avatar", "üìπ Video Selfie", "üéÆ Avatar 3D", "üì± Subir Archivo"])
    
    with tab1:
        st.markdown("#### üß† Generador de Avatar con IA Integrada")
        
        col1, col2 = st.columns(2)
        
        with col1:
            nombre_avatar = st.text_input("Tu nombre:", value="Serenity", placeholder="Escribe tu nombre")
            
            estilo_avatar = st.selectbox(
                "Estilo del avatar:",
                ["profesional", "amigable", "relajante"],
                index=1
            )
            
            personalidad = st.selectbox(
                "Personalidad:",
                ["amigable", "energetico", "relajado"],
                index=0
            )
            
            color_favorito = st.color_picker("Color favorito:", "#4ECDC4")
            
        with col2:
            if st.button("üé® Generar Avatar Est√°tico", key="gen_estatico"):
                with st.spinner("Generando avatar con IA..."):
                    avatar_img = generar_avatar_ia(nombre_avatar, estilo_avatar, color_favorito)
                    
                    # Convertir a bytes para mostrar
                    img_buffer = io.BytesIO()
                    avatar_img.save(img_buffer, format='PNG')
                    img_bytes = img_buffer.getvalue()
                    
                    st.image(avatar_img, caption=f"Avatar de {nombre_avatar}", width=300)
                    
                    # Guardar en session state
                    st.session_state.avatar_generado = img_bytes
                    st.success("‚úÖ Avatar generado con IA!")
            
            if st.button("üé¨ Generar Avatar Animado", key="gen_animado"):
                with st.spinner("Generando avatares animados con IA..."):
                    frames = crear_avatar_animado_ia(nombre_avatar, personalidad)
                    
                    st.markdown("**Frames del avatar animado:**")
                    cols = st.columns(4)
                    
                    for i, frame in enumerate(frames):
                        with cols[i]:
                            st.image(frame, caption=f"Frame {i+1}", width=150)
                    
                    st.success("‚úÖ Avatar animado generado!")
                    st.info("üí° Para video completo, usa las opciones externas abajo")
        
        # Mostrar avatar generado si existe
        if st.session_state.get('avatar_generado'):
            st.markdown("---")
            st.markdown("#### üéØ Tu Avatar Generado")
            
            # Convertir bytes de vuelta a imagen
            avatar_img = Image.open(io.BytesIO(st.session_state.avatar_generado))
            
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.image(avatar_img, caption="Tu avatar personalizado", width=250)
            
            # Opci√≥n para usar como avatar principal
            if st.button("üíæ Usar como Mi Avatar"):
                # Guardar imagen localmente
                import os
                os.makedirs("avatars", exist_ok=True)
                avatar_path = f"avatars/{nombre_avatar}_avatar.png"
                avatar_img.save(avatar_path)
                
                st.session_state.avatar_personalizado = avatar_path
                st.success(f"‚úÖ Avatar guardado como {avatar_path} y configurado!")
                st.balloons()
        
        st.markdown("---")
        st.info("""
        üß† **IA Integrada incluye:**
        - Generaci√≥n autom√°tica de rostros
        - Personalizaci√≥n por nombre y estilo  
        - Colores adaptativos
        - Elementos decorativos din√°micos
        - M√∫ltiples frames para animaci√≥n
        """)
    
    with tab2:
        st.markdown("#### ü§ñ Avatar con IA Externa")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **D-ID (Recomendado) - Avatar parlante con IA:**
            1. Ve a [D-ID Studio](https://www.d-id.com/)
            2. Sube una foto tuya o elige un avatar
            3. Escribe tu texto de presentaci√≥n
            4. Genera el video parlante
            5. Descarga y sube aqu√≠
            """)
            if st.button("üîó Abrir D-ID", key="d_id"):
                st.markdown("[Ir a D-ID](https://www.d-id.com/)")
        
        with col2:
            st.markdown("""
            **Synthesia - Avatar profesional:**
            1. Ve a [Synthesia](https://www.synthesia.io/)
            2. Crea avatar personalizado
            3. Graba tu mensaje
            4. Exporta el video
            5. Sube la URL aqu√≠
            """)
            if st.button("üîó Abrir Synthesia", key="synthesia"):
                st.markdown("[Ir a Synthesia](https://www.synthesia.io/)")
    
    with tab3:
        st.markdown("#### üé• Subir Video Personal")
        
        video_uploaded = st.file_uploader(
            "üìπ Sube tu video personal (opcional)", 
            type=['mp4', 'avi', 'mov'],
            help="Sube un video tuyo para usarlo como avatar personalizado"
        )
        
        if video_uploaded is not None:
            st.success("‚úÖ Video subido correctamente!")
            st.video(video_uploaded)
            st.session_state['video_personal'] = video_uploaded
        else:
            st.info("ü§ñ Sin video personal, se usar√° avatar IA generado.")
        
        # Subida de archivo
        uploaded_file = st.file_uploader(
            "Sube tu video/imagen de avatar:",
            type=['mp4', 'mov', 'gif', 'jpg', 'png'],
            help="Formatos soportados: MP4, MOV, GIF, JPG, PNG"
        )
        
        if uploaded_file is not None:
            # Guardar archivo
            import os
            os.makedirs("avatars", exist_ok=True)
            
            file_path = f"avatars/{uploaded_file.name}"
            with open(file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            st.success(f"‚úÖ Avatar guardado como: {file_path}")
            st.info("üí° Usa esta ruta en la configuraci√≥n: " + file_path)
            
            # Mostrar preview
            if uploaded_file.type.startswith('image'):
                st.image(file_path, width=300, caption="Preview de tu avatar")
            else:
                st.video(file_path)

def mostrar_serenity_parlante():
    """Muestra el avatar de Serenity con opci√≥n de personalizaci√≥n"""
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.markdown("### üé≠ Conoce a Serenity Johana")
    
    with col2:
        if st.button("üé® Personalizar Avatar", key="personalizar_avatar"):
            st.session_state.mostrar_creator = True
    
    # Mostrar creador si est√° activado
    if st.session_state.get('mostrar_creator', False):
        crear_avatar_personalizado()
        if st.button("‚ùå Cerrar Creador"):
            st.session_state.mostrar_creator = False
            st.rerun()
        return
    
    # Avatar actual
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        # Avatar actual
        if st.session_state.get('avatar_personalizado'):
            # Mostrar avatar personalizado
            avatar_url = st.session_state.avatar_personalizado
            st.markdown(f"""
            <div style="display: flex; justify-content: center; margin: 10px 0;">
                <iframe src="{avatar_url}" 
                width="400" height="300" frameborder="0" allowfullscreen 
                style="border-radius: 15px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);"></iframe>
            </div>
            """, unsafe_allow_html=True)
        else:
            # Avatar por defecto - Video local de Johana
            try:
                # Primero intentar mostrar el video local
                st.video("johana_avatar.mp4", format="video/mp4", start_time=0)
                st.caption("üé≠ Serenity Johana - Tu asistente de bienestar personal")
            except:
                # Si no funciona el video local, usar imagen por defecto
                st.image(AVATAR_SERENITY_IMAGEN, width=200, caption="Serenity Johana - Tu asistente de bienestar")
                
                # Video alternativo online
                try:
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center; margin: 10px 0;">
                            <iframe src="https://streamable.com/e/ez13ge" 
                            width="400" height="300" frameborder="0" allowfullscreen 
                            style="border-radius: 15px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);"></iframe>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                except:
                    st.info("üé≠ Usa el bot√≥n 'Personalizar Avatar' para crear el tuyo")
    
    # Configuraci√≥n de avatar personalizado
    st.markdown("---")
    st.markdown("### ‚öôÔ∏è Configurar Avatar Personalizado")
    
    col1, col2 = st.columns(2)
    
    with col1:
        avatar_url = st.text_input(
            "URL de tu avatar:",
            placeholder="https://streamable.com/tu-avatar o ./avatars/mi-video.mp4",
            help="Pega aqu√≠ la URL de tu avatar creado"
        )
        
        if st.button("üíæ Guardar Avatar"):
            if avatar_url:
                st.session_state.avatar_personalizado = avatar_url
                st.success("‚úÖ Avatar personalizado guardado!")
                st.rerun()
            else:
                st.warning("‚ö†Ô∏è Ingresa una URL v√°lida")
    
    with col2:
        if st.session_state.get('avatar_personalizado'):
            st.success(f"Avatar actual: {st.session_state.avatar_personalizado}")
            if st.button("üîÑ Restaurar Avatar Original"):
                del st.session_state.avatar_personalizado
                st.success("‚úÖ Avatar original restaurado!")
                st.rerun()
        else:
            st.info("üí° No hay avatar personalizado configurado")
    
    st.markdown("""
    <div style="text-align: center; background: linear-gradient(45deg, #FFE5B4, #FFCCCB); 
                padding: 15px; border-radius: 10px; margin: 15px 0;">
        <h4 style="color: #333; margin: 0;">‚ú® Tu asistente personal para el bienestar emocional ‚ú®</h4>
        <p style="color: #666; margin: 5px 0;">Aqu√≠ para escucharte, apoyarte y guiarte hacia un mejor bienestar</p>
    </div>
    """, unsafe_allow_html=True)

def ejercicio_respiracion(contexto="general"):
    """Ejercicio de respiraci√≥n con video integrado EN ESPA√ëOL"""
    st.write("üßò‚Äç‚ôÄÔ∏è **Ejercicio de Respiraci√≥n Guiada en Espa√±ol**")
    st.write("Sigue estos pasos mientras escuchas la gu√≠a completa en espa√±ol:")
    
    col1, col2 = st.columns([1, 1])
    with col1:
        st.write("**Pasos a seguir:**")
        st.write("1. üå¨Ô∏è Inhala profundamente por la nariz durante 4 segundos")
        st.write("2. ‚è∏Ô∏è Mant√©n el aire en tus pulmones durante 4 segundos")
        st.write("3. üí® Exhala lentamente por la boca durante 6 segundos")
        st.write("4. üîÑ Repite este ciclo entre 5 y 10 veces")
        st.write("5. üòå Conc√©ntrate solo en tu respiraci√≥n")
        
        # SONIDO RELAJANTE integrado
        if st.button("üéµ Ver video de sonidos relajantes", key=f"btn_sonido_respiracion_{contexto}"):
            sonido_seleccionado = random.choice(SONIDOS_RELAJACION)
            st.write("**üé∂ Video de sonidos relajantes en espa√±ol:**")
            mostrar_video_integrado(sonido_seleccionado, "Sonidos Relajantes Espa√±ol", 400, 225)
            st.success("üé∂ Disfruta estos sonidos relajantes mientras realizas tu respiraci√≥n...")
    
        with col2:
            st.write("**üé¨ Video de respiraci√≥n guiada:**")
            if st.button("‚ñ∂Ô∏è Ver Video de Respiraci√≥n", key=f"play_respiracion_{contexto}"):
                mostrar_video_integrado(VIDEO_RESPIRACION, "Respiraci√≥n Guiada Espa√±ol", 400, 225)
            
            # Alternativa sin video
            st.markdown("""
            **ÔøΩ Alternativa sin video:**
            1. **Cuenta mentalmente:** 4 segundos inhalar, 4 mantener, 6 exhalar
            2. **Usa un temporizador:** Pon 5 minutos en tu tel√©fono
            3. **M√∫sica de fondo:** Pon m√∫sica suave mientras respiras
            4. **Aplicaciones:** Calm, Headspace, Insight Timer
            """)
            st.info("üåü La respiraci√≥n profunda funciona incluso sin video")

def ejercicio_meditacion(contexto="general"):
    """Ejercicio de meditaci√≥n integrado EN ESPA√ëOL"""
    st.write("üßò **Meditaci√≥n Guiada de 5 Minutos en Espa√±ol**")
    
    col1, col2 = st.columns([1, 1])
    with col1:
        st.write("**Instrucciones completas en espa√±ol:**")
        st.write("1. ü™ë Si√©ntate de manera c√≥moda y relajada")
        st.write("2. üëÄ Cierra suavemente los ojos")
        st.write("3. üß† Conc√©ntrate √∫nicamente en tu respiraci√≥n")
        st.write("4. üí≠ Permite que los pensamientos pasen sin juzgarlos")
        st.write("5. ‚è∞ Dedica exactamente 5 minutos a esta meditaci√≥n")
        st.write("6. üïäÔ∏è Mant√©n la mente en calma y presente")
        
        if st.button("‚è∞ Comenzar meditaci√≥n guiada completa", key=f"btn_temporizador_meditacion_{contexto}"):
            st.success("¬°Meditaci√≥n en espa√±ol iniciada! Rel√°jate completamente y sigue la gu√≠a")
            st.balloons()
    
    with col2:
        st.write("**üé¨ Video de meditaci√≥n guiada:**")
        if st.button("‚ñ∂Ô∏è Ver Video de Meditaci√≥n", key=f"play_meditacion_{contexto}"):
            mostrar_video_integrado(VIDEO_MEDITACION, "Meditaci√≥n Guiada Espa√±ol", 400, 225)
        
        # Meditaci√≥n sin video
        st.markdown("""
        **üßò‚Äç‚ôÄÔ∏è Meditaci√≥n sin video:**
        1. **Timer:** Pon 5 minutos en silencio
        2. **Postura:** Si√©ntate c√≥modo, espalda recta
        3. **Respiraci√≥n:** Observa tu respiraci√≥n natural
        4. **Pensamientos:** Deja que pasen sin juzgar
        5. **Apps:** Insight Timer, Calm, Headspace
        """)
        st.info("üá™üá∏ La meditaci√≥n es efectiva con o sin gu√≠a de video")

def ejercicio_estiramiento(contexto="general"):
    """Ejercicio de estiramiento integrado EN ESPA√ëOL"""
    st.write("ü§∏‚Äç‚ôÄÔ∏è **Ejercicios de Estiramiento Suave en Espa√±ol**")
    
    col1, col2 = st.columns([1, 1])
    with col1:
        st.write("**Rutina completa de 3 minutos en espa√±ol:**")
        st.write("1. ü§≤ Estira ambos brazos hacia arriba durante 10 segundos")
        st.write("2. üôÑ Gira el cuello suavemente hacia cada lado")
        st.write("3. ü§ó Abraza tu cuerpo y estira toda la espalda")
        st.write("4. ü¶µ Estira las piernas mientras permaneces sentado")
        st.write("5. üòå Respira profundamente entre cada ejercicio")
        st.write("6. üîÑ Repite toda la secuencia dos veces")
        
        if st.button("üéØ Comenzar rutina de estiramiento", key=f"btn_rutina_estiramiento_{contexto}"):
            st.info("¬°Perfecto! Sigue todas las instrucciones en espa√±ol del video integrado")
    
    with col2:
        st.write("**Video de estiramiento en espa√±ol:**")
        video_ejercicio = random.choice(videos_ejercicios_espanol)
        mostrar_video_integrado(video_ejercicio, "Ejercicios Estiramiento Espa√±ol", 400, 225)
        st.info("üá™üá∏ Ejercicios explicados paso a paso completamente en espa√±ol")

def mostrar_videos_relajacion():
    """Funci√≥n para mostrar galer√≠a de videos de relajaci√≥n con alternativas"""
    st.subheader("üé¨ Galer√≠a de Videos de Relajaci√≥n en Espa√±ol")
    st.write("Elige tu video preferido para relajarte:")
    
    # Crear pesta√±as para diferentes tipos de contenido
    tab1, tab2, tab3 = st.tabs(["üéµ M√∫sica Relajante", "üåä Sonidos Naturales", "üßò Meditaci√≥n Guiada"])
    
    with tab1:
        st.markdown("#### üéµ M√∫sica para Relajarse")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üé∂ Reproducir M√∫sica Relajante", key="musica_1"):
                mostrar_video_integrado(VIDEOS_RELAJACION[0], "M√∫sica Relajante", 450, 250)
        with col2:
            st.markdown("""
            **üéµ Beneficios de la m√∫sica relajante:**
            - Reduce el estr√©s y la ansiedad
            - Mejora la concentraci√≥n
            - Ayuda a conciliar el sue√±o
            - Disminuye la presi√≥n arterial
            """)
    
    with tab2:
        st.markdown("#### üåä Sonidos de la Naturaleza")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üåø Reproducir Sonidos Naturales", key="naturaleza_1"):
                mostrar_video_integrado(VIDEOS_RELAJACION[1], "Sonidos Naturales", 450, 250)
        with col2:
            st.markdown("""
            **ÔøΩ Beneficios de los sonidos naturales:**
            - Conexi√≥n con la naturaleza
            - Bloquea ruidos molestos
            - Mejora el estado de √°nimo
            - Reduce la fatiga mental
            """)
    
    with tab3:
        st.markdown("#### üßò Meditaci√≥n Guiada")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üßò‚Äç‚ôÄÔ∏è Iniciar Meditaci√≥n", key="meditacion_video"):
                mostrar_video_integrado(VIDEOS_RELAJACION[2], "Meditaci√≥n Guiada", 450, 250)
        with col2:
            st.markdown("""
            **üßò Beneficios de la meditaci√≥n:**
            - Calma la mente
            - Reduce pensamientos negativos  
            - Mejora la autorregulaci√≥n emocional
            - Aumenta la atenci√≥n plena
            """)
    
    # Alternativa si los videos no cargan
    st.markdown("---")
    st.info("""
    üí° **¬øLos videos no se cargan?** 
    Puedes usar estos recursos alternativos:
    - üéß Aplicaci√≥n "Calm" o "Headspace"
    - üåä Buscar "sonidos relajantes" en Spotify
    - üì± YouTube: buscar "meditaci√≥n en espa√±ol"
    - üéµ Radio online de m√∫sica relajante
    """)

def recomendar_pelicula():
    """Recomienda pel√≠culas en espa√±ol seg√∫n el estado de √°nimo"""
    st.subheader("üé¨ Recomendaci√≥n de Pel√≠cula en Espa√±ol")
    
    pelicula = random.choice(peliculas_espanol)
    
    col1, col2 = st.columns([1, 1])
    with col1:
        st.write(f"**üé≠ {pelicula['titulo']}**")
        st.write(f"**G√©nero:** {pelicula['genero']}")
        st.write(f"**Descripci√≥n:** {pelicula['descripcion']}")
    
    with col2:
        st.write(f"**¬øPor qu√© te la recomiendo especialmente?**")
        st.info(pelicula['por_que'])
        st.write("üçø **Consejo:** Todas nuestras recomendaciones est√°n completamente en espa√±ol")
    
    if st.button("üé≤ Recomendar otra pel√≠cula diferente en espa√±ol", key="btn_otra_pelicula"):
        st.rerun()

def frase_apoyo():
    frases = [
        "Recuerda siempre: esto tambi√©n pasar√°.",
        "Eres mucho m√°s fuerte de lo que puedes creer.",
        "Respira profundamente, todo estar√° bien.",
        "No est√°s solo en esto, estoy aqu√≠ contigo.",
        "Cada peque√±o paso que das cuenta much√≠simo.",
        "Tu bienestar es realmente importante.",
        "Mereces amor y cuidado, especialmente de ti mismo.",
        "Las tormentas no duran para siempre, pero t√∫ s√≠.",
        "Tu historia a√∫n se est√° escribiendo, no termines el libro ahora.",
        "Hoy es un buen d√≠a para ser amable contigo mismo."
    ]
    return random.choice(frases)

def mostrar_contacto_emergencia():
    st.warning("üö® ¬øNecesitas ayuda urgente? Puedes comunicarte inmediatamente con:")
    st.markdown("- **L√≠nea Nacional para la Prevenci√≥n del Suicidio (Colombia):** 01 8000 113 113")
    st.markdown("- **L√≠nea de Emergencias 123 (Bogot√°):** Marca 123 y solicita ayuda en salud mental")
    st.markdown("- **L√≠nea de atenci√≥n psicol√≥gica gratuita (Colombia):** 106")
    st.markdown("- **Red Nacional de Salud Mental:** [Ver todos los recursos disponibles](https://www.minsalud.gov.co/salud/publica/SaludMental/Paginas/lineas-de-atencion.aspx)")
    st.info("Si no puedes comunicarte por tel√©fono, acude inmediatamente al hospital o centro de salud m√°s cercano.")

def registrar_emocion(nombre, emocion):
    if emocion:
        with open("emociones.txt", "a", encoding="utf-8") as archivo:
            archivo.write(f"{nombre}: {emocion}\n")
        st.success("¬°Much√≠simas gracias por compartir conmigo c√≥mo te sientes!")

def mostrar_historial(nombre):
    try:
        with open("emociones.txt", "r", encoding="utf-8") as archivo:
            lineas = archivo.readlines()
        historial = [linea for linea in lineas if linea.startswith(nombre + ":")]
        if historial:
            st.subheader("Tu historial completo de emociones:")
            for linea in historial:
                st.write(linea.replace(nombre + ":", "").strip())
        else:
            st.info("A√∫n no tienes emociones registradas en tu historial.")
    except FileNotFoundError:
        st.info("A√∫n no tienes emociones registradas en tu historial.")

def recomendar_recursos(emocion):
    if not emocion:
        return
    st.subheader("üéØ Recomendaciones personalizadas para ti:")
    
    palabras_depresion = [
        "triste", "deprimido", "depresion", "decaido", "melancolico", "desanimado",
        "sin ganas", "vacio", "solo", "soledad", "llorar", "llorando", "desesperanza",
        "abatido", "desmotivado", "inutil", "culpa", "culpable", "fracaso", "oscuro",
        "sufro", "sufrimiento", "no puedo mas", "no quiero vivir", "no tengo fuerzas",
        "quiero morir", "quitarme la vida", "suicidar", "suicidio", "no encuentro sentido"
    ]
    
    palabras_riesgo = [
        "quitarme la vida", "suicidar", "suicidio", "no quiero vivir", "quiero morir", 
        "me quiero morir", "no encuentro sentido", "acabar con todo"
    ]
    
    emocion_limpio = unidecode(emocion.lower())
    
    if any(frase in emocion_limpio for frase in palabras_riesgo):
        st.error("‚ö†Ô∏è Si tienes pensamientos de hacerte da√±o, por favor busca ayuda inmediata. No est√°s solo en esto.")
        mostrar_contacto_emergencia()
        st.write("Te recomiendo encarecidamente buscar apoyo profesional. Tu vida es muy valiosa e importante.")
        ejercicio_respiracion("emergencia")
        return
        
    if "ansioso" in emocion_limpio or "ansiedad" in emocion_limpio:
        st.write("**Para ayudarte con la ansiedad te recomiendo especialmente:**")
        ejercicio_respiracion("ansiedad")
        ejercicio_meditacion("ansiedad")
        
    elif any(palabra in emocion_limpio for palabra in palabras_depresion):
        st.write("**Para mejorar tu estado de √°nimo te sugiero:**")
        ejercicio_respiracion("depresion")
        ejercicio_estiramiento("depresion")
        recomendar_pelicula()
        st.write("- Habla con un amigo cercano o familiar de confianza.")
        st.write("- Considera seriamente buscar ayuda profesional, recuerda que no est√°s solo en esto.")
        mostrar_contacto_emergencia()
        
    elif "feliz" in emocion_limpio or "alegre" in emocion_limpio:
        st.write("- ¬°Sigue exactamente as√≠! Comparte tu alegr√≠a con otras personas.")
        st.balloons()
        st.write("¬øQu√© tal si celebramos juntos con una buena pel√≠cula en espa√±ol? üéµ")
        recomendar_pelicula()
        
    else:
        st.write("**Te recomiendo estos ejercicios de bienestar completamente en espa√±ol:**")
        ejercicio_respiracion("bienestar")

def responder_mensaje(mensaje):
    mensaje_limpio = unidecode(mensaje.lower())
    palabras_riesgo = [
        "quitarme la vida", "suicidar", "suicidio", "no quiero vivir", "quiero morir", 
        "me quiero morir", "no encuentro sentido", "acabar con todo"
    ]
    
    # ERROR CORREGIDO: Cambi√© "en" por "in"
    if any(frase in mensaje_limpio for frase in palabras_riesgo):
        return ("‚ö†Ô∏è Si tienes pensamientos de hacerte da√±o, por favor busca ayuda inmediata. "
                "No est√°s solo en esto. Puedes comunicarte con la L√≠nea Nacional para la Prevenci√≥n del Suicidio (01 8000 113 113), "
                "la L√≠nea 123 en Bogot√°, o el 106 en Colombia. Tu vida es extremadamente valiosa e importante.")
    
    if any(frase in mensaje_limpio for frase in frases_alegria):
        return ("¬°Me alegro much√≠simo de escuchar eso! La felicidad realmente se contagia. "
                "Con esa energ√≠a tan positiva, ¬øqu√© tal si hacemos algunos ejercicios de bienestar o vemos una buena pel√≠cula en espa√±ol? "
                "¬°Mantengamos juntos esa buena energ√≠a! ‚ú®")
    
    if "respirar" in mensaje_limpio or "respiracion" in mensaje_limpio:
        return "¬øTe gustar√≠a hacer un ejercicio de respiraci√≥n guiado completamente en espa√±ol? Escribe 's√≠' para comenzar inmediatamente."
    elif "meditacion" in mensaje_limpio or "meditar" in mensaje_limpio:
        return "La meditaci√≥n es excelente para conseguir calma mental. ¬øQuieres que te gu√≠e en una meditaci√≥n completa en espa√±ol?"
    elif "ejercicio" in mensaje_limpio or "estiramiento" in mensaje_limpio:
        return "Los ejercicios suaves ayudan much√≠simo a relajar todas las tensiones. ¬øTe interesa una rutina de estiramiento explicada completamente en espa√±ol?"
    elif "pelicula" in mensaje_limpio or "pel√≠cula" in mensaje_limpio:
        return "¬°Excelente idea! Las pel√≠culas pueden ser muy terap√©uticas. ¬øTe gustar√≠a que te recomiende una pel√≠cula interesante en espa√±ol?"
    elif "si" in mensaje_limpio and "respirar" in st.session_state.get("last_message", ""):
        return ("Perfecto. Vamos a hacer juntos un ejercicio de respiraci√≥n guiado completamente en espa√±ol.\n"
                "Inhala profundamente por la nariz durante exactamente 4 segundos...\n"
                "Mant√©n el aire en tus pulmones durante 4 segundos...\n"
                "Exhala muy lentamente por la boca durante 6 segundos...\n"
                "Repite este ciclo completo varias veces. Te ayudar√° a sentirte mucho m√°s tranquilo.")
    elif "frase" in mensaje_limpio or "apoyo" in mensaje_limpio:
        return frase_apoyo()
    elif any(palabra in mensaje_limpio for palabra in [
        "triste", "deprimido", "depresion", "decaido", "melancolico", "desanimado",
        "sin ganas", "vacio", "solo", "soledad", "llorar", "llorando", "desesperanza",
        "abatido", "desmotivado", "inutil", "culpa", "culpable", "fracaso", "oscuro",
        "sufro", "sufrimiento", "no puedo mas", "no quiero vivir", "no tengo fuerzas",
        "quiero morir", "me quiero morir"
    ]):
        return ("Lamento mucho que te sientas de esa manera. Recuerda que no est√°s solo en esto. "
                "Hablar con alguien de confianza o un profesional puede ayudarte enormemente. "
                "¬øQuieres que te recomiende algunos ejercicios de relajaci√≥n en espa√±ol o una pel√≠cula que te ayude a levantar el √°nimo?")
    elif "gracias" in mensaje_limpio:
        return "¬°De nada! Estoy aqu√≠ para ayudarte siempre que me necesites."
    elif "adios" in mensaje_limpio or "salir" in mensaje_limpio:
        return "¬°Much√≠simas gracias por hablar conmigo! Cu√≠date mucho y recuerda que siempre estar√© aqu√≠ cuando me necesites."
    else:
        return "Cu√©ntame m√°s detalles sobre c√≥mo te sientes o pide un 'ejercicio de respiraci√≥n', 'meditaci√≥n', 'pel√≠cula' o una 'frase de apoyo' - todo completamente en espa√±ol."

# INTERFAZ PRINCIPAL MEJORADA
st.set_page_config(
    page_title="üåü Serenity Johana",
    page_icon="üåü",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Banner principal mejorado
st.markdown("""
<div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            padding: 30px; border-radius: 15px; margin-bottom: 30px; text-align: center;">
    <h1 style="color: white; margin: 0; font-size: 3em;">üåü Serenity Johana üåü</h1>
    <p style="color: white; font-size: 1.2em; margin: 10px 0;">Tu Asistente Personal para el Bienestar Emocional</p>
    <p style="color: #B8E6B8; font-size: 1em; margin: 0;">‚ú® Completamente en Espa√±ol ‚Ä¢ Apoyo 24/7 ‚Ä¢ Recursos Profesionales ‚ú®</p>
</div>
""", unsafe_allow_html=True)

# Sidebar con informaci√≥n importante
st.sidebar.markdown("## üè† Navegaci√≥n R√°pida")
st.sidebar.markdown("### üö® Emergencias")
if st.sidebar.button("‚òéÔ∏è L√≠neas de Crisis", help="Contactos de emergencia inmediatos"):
    st.session_state.mostrar_emergencia = True

st.sidebar.markdown("### üéØ Acceso Directo")
acceso_rapido = st.sidebar.selectbox(
    "Ir directamente a:",
    ["Seleccionar...", "Respiraci√≥n", "Meditaci√≥n", "Videos Relajantes", "Chat", "Pel√≠culas", "Mi Historial"]
)

st.sidebar.markdown("### üìä Tu Progreso")
if 'total_sesiones' not in st.session_state:
    st.session_state.total_sesiones = 0
st.sidebar.metric("Sesiones completadas", st.session_state.total_sesiones)

# Mostrar avatar parlante en TAMA√ëO REDUCIDO
mostrar_serenity_parlante()

# Mensaje motivacional con dise√±o mejorado
mensaje_diario = random.choice(mensajes_motivacionales)
st.markdown(f"""
<div style="background: linear-gradient(45deg, #FFE5B4, #FFCCCB); 
            padding: 20px; border-radius: 10px; border-left: 5px solid #FF6B9D; margin: 20px 0;">
    <p style="margin: 0; font-size: 1.1em; font-style: italic; color: #333;">üí´ {mensaje_diario}</p>
</div>
""", unsafe_allow_html=True)

# Manejo de emergencias desde sidebar
if st.session_state.get('mostrar_emergencia', False):
    st.error("üö® L√çNEAS DE CRISIS Y EMERGENCIA")
    mostrar_contacto_emergencia()
    if st.button("‚ùå Cerrar"):
        st.session_state.mostrar_emergencia = False
        st.rerun()

# Secci√≥n de perfil mejorada
col1, col2 = st.columns([2, 1])

with col1:
    st.markdown("### üë§ Tu Perfil de Bienestar")
    nombre = st.text_input("¬øC√≥mo te llamas?", placeholder="Escribe tu nombre aqu√≠...")

with col2:
    if nombre:
        st.markdown("### üéØ Estado Actual")
        st.success(f"¬°Bienvenido, {nombre}! üëã")

if nombre:
    # Evaluaci√≥n r√°pida del estado de √°nimo
    st.markdown("### üåà ¬øC√≥mo te sientes hoy?")
    
    tab1, tab2, tab3 = st.tabs(["üòä Evaluaci√≥n R√°pida", "üìù Descripci√≥n Detallada", "üìä Mi Historial"])
    
    with tab1:
        col1, col2, col3, col4, col5 = st.columns(5)
        
        estados = {
            "üò¢": "Muy triste",
            "üòï": "Un poco bajo",
            "üòê": "Neutral",
            "üòä": "Bien",
            "üòÑ": "Muy bien"
        }
        
        estado_seleccionado = None
        
        with col1:
            if st.button("üò¢", help="Muy triste", key="muy_triste"):
                estado_seleccionado = "muy triste"
        with col2:
            if st.button("üòï", help="Un poco bajo", key="poco_bajo"):
                estado_seleccionado = "un poco bajo"
        with col3:
            if st.button("üòê", help="Neutral", key="neutral"):
                estado_seleccionado = "neutral"
        with col4:
            if st.button("üòä", help="Bien", key="bien"):
                estado_seleccionado = "bien"
        with col5:
            if st.button("üòÑ", help="Muy bien", key="muy_bien"):
                estado_seleccionado = "muy bien"
        
        if estado_seleccionado:
            st.success(f"Has seleccionado: {estado_seleccionado}")
            registrar_emocion(nombre, estado_seleccionado)
            recomendar_recursos(estado_seleccionado)
            st.session_state.total_sesiones += 1
    
    with tab2:
        emocion = st.text_area(
            "Describe con m√°s detalle c√≥mo te sientes:",
            placeholder="Por ejemplo: Me siento ansioso por el trabajo, tengo mucho estr√©s...",
            height=100
        )
        
        if st.button("üíæ Registrar descripci√≥n detallada", key="btn_registrar_detallada"):
            if emocion:
                registrar_emocion(nombre, emocion)
                recomendar_recursos(emocion)
                st.success("‚úÖ Tu estado emocional ha sido registrado")
                st.session_state.total_sesiones += 1
            else:
                st.warning("‚ö†Ô∏è Por favor describe c√≥mo te sientes")
    
    with tab3:
        mostrar_historial(nombre)

    # Verificar acceso r√°pido desde sidebar
    if acceso_rapido != "Seleccionar...":
        if acceso_rapido == "Respiraci√≥n":
            opcion = "Ejercicio de respiraci√≥n"
        elif acceso_rapido == "Meditaci√≥n":
            opcion = "Meditaci√≥n guiada"
        elif acceso_rapido == "Videos Relajantes":
            opcion = "Ver galer√≠a de videos de relajaci√≥n"
        elif acceso_rapido == "Chat":
            opcion = "Chat en tiempo real"
        elif acceso_rapido == "Pel√≠culas":
            opcion = "Recomendaci√≥n de pel√≠cula"
        elif acceso_rapido == "Mi Historial":
            mostrar_historial(nombre)
            opcion = "Nada m√°s por ahora"
    else:
        # Interfaz principal mejorada con tarjetas
        st.markdown("### üéØ ¬øQu√© te gustar√≠a hacer ahora?")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üßò‚Äç‚ôÄÔ∏è Respiraci√≥n", key="card_respiracion", help="Ejercicios de respiraci√≥n guiada"):
                opcion = "Ejercicio de respiraci√≥n"
            if st.button("üé¨ Videos Relajantes", key="card_videos", help="Galer√≠a de videos de relajaci√≥n"):
                opcion = "Ver galer√≠a de videos de relajaci√≥n"
            if st.button("üíù Frase de Apoyo", key="card_frase", help="Recibe una frase motivacional"):
                opcion = "Recibir una frase de apoyo"
        
        with col2:
            if st.button("üßò Meditaci√≥n", key="card_meditacion", help="Meditaci√≥n guiada en espa√±ol"):
                opcion = "Meditaci√≥n guiada"
            if st.button("üé≠ Pel√≠culas", key="card_peliculas", help="Recomendaci√≥n personalizada"):
                opcion = "Recomendaci√≥n de pel√≠cula"
            if st.button("üí¨ Chat", key="card_chat", help="Conversa con Serenity Johana"):
                opcion = "Chat en tiempo real"
        
        with col3:
            if st.button("ü§∏‚Äç‚ôÄÔ∏è Estiramiento", key="card_estiramiento", help="Ejercicios suaves de estiramiento"):
                opcion = "Estiramiento suave"
            if st.button("üìä Mi Progreso", key="card_progreso", help="Ver tu historial completo"):
                mostrar_historial(nombre)
                opcion = "Nada m√°s por ahora"
            if st.button("üòå Descansar", key="card_descansar", help="Finalizar sesi√≥n"):
                opcion = "Nada m√°s por ahora"

    # Procesar la opci√≥n seleccionada
    if 'opcion' in locals():
        if opcion == "Ejercicio de respiraci√≥n":
            st.markdown("---")
            ejercicio_respiracion("opcion_principal")
        elif opcion == "Meditaci√≥n guiada":
            st.markdown("---")
            ejercicio_meditacion("opcion_principal")
        elif opcion == "Estiramiento suave":
            st.markdown("---")
            ejercicio_estiramiento("opcion_principal")
        elif opcion == "Ver galer√≠a de videos de relajaci√≥n":
            st.markdown("---")
            mostrar_videos_relajacion()
        elif opcion == "Recomendaci√≥n de pel√≠cula":
            st.markdown("---")
            recomendar_pelicula()
        elif opcion == "Recibir una frase de apoyo":
            st.markdown("---")
            st.markdown(f"""
            <div style="background: linear-gradient(45deg, #FFE5B4, #FFCCCB); 
                        padding: 25px; border-radius: 15px; text-align: center; margin: 20px 0;">
                <h3 style="color: #333; margin: 0;">üíù Mensaje para ti:</h3>
                <p style="color: #333; font-size: 1.2em; font-style: italic; margin: 10px 0;">"{frase_apoyo()}"</p>
            </div>
            """, unsafe_allow_html=True)
        elif opcion == "Chat en tiempo real":
            st.markdown("---")
            st.subheader("üí¨ Chat con Serenity Johana")
            
            if "chat" not in st.session_state:
                st.session_state.chat = []
            
            # √Årea de chat mejorada
            chat_container = st.container()
            
            with chat_container:
                for i, (remitente, mensaje) in enumerate(st.session_state.chat):
                    if remitente == "Serenity Johana":
                        col1, col2 = st.columns([1, 6])
                        with col1:
                            st.image(AVATAR_SERENITY_IMAGEN, width=60)
                        with col2:
                            st.markdown(f"""
                            <div style="background: #E8F4FD; padding: 15px; border-radius: 10px; margin: 5px 0;">
                                <p style="margin: 0; color: #333;"><strong>{remitente}:</strong> {mensaje}</p>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.markdown(f"""
                        <div style="background: #F0F8FF; padding: 15px; border-radius: 10px; margin: 5px 0; margin-left: 60px;">
                            <p style="margin: 0; color: #333;"><strong>{remitente}:</strong> {mensaje}</p>
                        </div>
                        """, unsafe_allow_html=True)
            
            # Input de chat mejorado
            col1, col2 = st.columns([5, 1])
            with col1:
                mensaje_usuario = st.text_input("Escribe tu mensaje:", key="chat_input", placeholder="¬øC√≥mo te sientes? ¬øEn qu√© puedo ayudarte?")
            with col2:
                enviar = st.button("üì§ Enviar", key="enviar_chat")
            
            if enviar and mensaje_usuario:
                st.session_state.chat.append(("T√∫", mensaje_usuario))
                respuesta = responder_mensaje(mensaje_usuario)
                st.session_state.chat.append(("Serenity Johana", respuesta))
                st.session_state.last_message = mensaje_usuario
                st.rerun()
        elif opcion == "Nada m√°s por ahora":
            st.markdown("""
            <div style="background: linear-gradient(45deg, #B8E6B8, #C8E8C8); 
                        padding: 25px; border-radius: 15px; text-align: center; margin: 20px 0;">
                <h3 style="color: #333; margin: 0;">üíô ¬°Gracias por tu tiempo!</h3>
                <p style="color: #333; margin: 10px 0;">Recuerda que siempre estar√© aqu√≠ cuando me necesites.</p>
                <p style="color: #555; margin: 0;"><em>Cu√≠date mucho y que tengas un d√≠a lleno de paz. ‚ú®</em></p>
            </div>
            """, unsafe_allow_html=True)

# Panel de estad√≠sticas y recursos adicionales
st.markdown("---")
st.markdown("### üìä Tu Bienestar en N√∫meros")

col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("üßò Sesiones Completadas", st.session_state.get('total_sesiones', 0))
with col2:
    # Contar emociones registradas
    try:
        with open("emociones.txt", "r", encoding="utf-8") as archivo:
            lineas = archivo.readlines()
        emociones_usuario = [linea for linea in lineas if nombre and linea.startswith(nombre + ":")]
        total_emociones = len(emociones_usuario)
    except:
        total_emociones = 0
    st.metric("üìù Emociones Registradas", total_emociones)
with col3:
    st.metric("üéØ D√≠as de Uso", "1")  # Puedes mejorar esto con fechas reales
with col4:
    st.metric("‚≠ê Nivel de Bienestar", "Creciendo" if total_emociones > 0 else "Comenzando")

# Recursos adicionales
st.markdown("### üîó Recursos Adicionales de Bienestar")

recursos_tabs = st.tabs(["üÜò Crisis", "üìö Educaci√≥n", "üè• Profesionales", "üì± Apps Recomendadas"])

with recursos_tabs[0]:
    st.markdown("#### üö® ¬øNecesitas ayuda inmediata?")
    col1, col2 = st.columns(2)
    with col1:
        st.info("""
        **üìû L√≠neas de Crisis (Colombia):**
        - Nacional: 01 8000 113 113
        - Bogot√°: 123
        - WhatsApp: 300 754 8933
        """)
    with col2:
        st.warning("""
        **üè• Cu√°ndo buscar ayuda:**
        - Pensamientos de autolesi√≥n
        - P√©rdida de control emocional
        - Aislamiento extremo
        - Cambios dr√°sticos de comportamiento
        """)

with recursos_tabs[1]:
    st.markdown("#### üìñ Aprende sobre Salud Mental")
    st.markdown("""
    - **Ansiedad:** Reacciones normales del cuerpo ante el estr√©s
    - **Depresi√≥n:** No es solo tristeza, es una condici√≥n m√©dica
    - **Mindfulness:** T√©cnica de atenci√≥n plena para el presente
    - **Autocuidado:** Actividades que mejoran tu bienestar f√≠sico y mental
    """)

with recursos_tabs[2]:
    st.markdown("#### üë®‚Äç‚öïÔ∏è Encuentra Ayuda Profesional")
    st.info("""
    **¬øCu√°ndo considerar terapia?**
    - S√≠ntomas que duran m√°s de 2 semanas
    - Interfieren con trabajo/estudios/relaciones
    - No mejoran con autocuidado
    - Afectan tu sue√±o o apetito significativamente
    """)
    
    st.markdown("""
    **Tipos de profesionales:**
    - üß† **Psic√≥logo:** Terapia y apoyo emocional
    - üíä **Psiquiatra:** Diagn√≥stico y medicaci√≥n
    - üë• **Trabajador Social:** Apoyo integral
    """)

with recursos_tabs[3]:
    st.markdown("#### üì± Apps Complementarias Recomendadas")
    st.markdown("""
    - **Headspace:** Meditaci√≥n guiada
    - **Calm:** Relajaci√≥n y sue√±o
    - **Youper:** Seguimiento del estado de √°nimo
    - **Sanvello:** Manejo de ansiedad
    - **MindShift:** T√©cnicas de CBT
    """)

# Encuesta mejorada
st.markdown("---")
st.markdown("### üí¨ Ay√∫danos a Mejorar Serenity")

with st.expander("üìù Comparte tu opini√≥n (opcional)"):
    col1, col2 = st.columns(2)
    
    with col1:
        satisfaccion = st.slider("¬øQu√© tan √∫til fue Serenity hoy?", 1, 5, 3)
        
        opciones = [
            "M√°s ejercicios de relajaci√≥n",
            "M√∫sica personalizada",
            "Consejos de alimentaci√≥n",
            "M√°s ejercicios f√≠sicos",
            "M√°s pel√≠culas/series",
            "Conexi√≥n con profesionales",
            "Recordatorios diarios"
        ]
        
        seleccion = st.multiselect("¬øQu√© te gustar√≠a agregar?", opciones)
    
    with col2:
        sugerencia = st.text_area("Sugerencias espec√≠ficas:", placeholder="Comparte tus ideas para mejorar...")
        
        if st.button("üíå Enviar Feedback", key="btn_enviar_encuesta"):
            st.success("¬°Gracias por tu feedback! Serenity seguir√° mejorando. üíñ")
            st.balloons()

# Footer final
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 30px; background: #F8F9FA; border-radius: 10px;">
    <h4 style="color: #4A5568; margin-bottom: 15px;">üåü Serenity Johana</h4>
    <p style="margin: 5px 0;">Tu bienestar mental es nuestra prioridad</p>
    <p style="margin: 5px 0; font-size: 0.9em;">Desarrollado con ‚ù§Ô∏è para apoyar tu salud emocional</p>
    <p style="margin: 5px 0; font-size: 0.8em;">‚ö†Ô∏è Recuerda: Esta app complementa pero no reemplaza la ayuda profesional</p>
</div>
""", unsafe_allow_html=True)